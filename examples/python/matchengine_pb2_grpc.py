# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import matchengine_pb2 as matchengine__pb2


class MatchengineStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterUser = channel.unary_unary(
                '/matchengine.Matchengine/RegisterUser',
                request_serializer=matchengine__pb2.UserInfo.SerializeToString,
                response_deserializer=matchengine__pb2.UserInfo.FromString,
                )
        self.BalanceQuery = channel.unary_unary(
                '/matchengine.Matchengine/BalanceQuery',
                request_serializer=matchengine__pb2.BalanceQueryRequest.SerializeToString,
                response_deserializer=matchengine__pb2.BalanceQueryResponse.FromString,
                )
        self.BalanceUpdate = channel.unary_unary(
                '/matchengine.Matchengine/BalanceUpdate',
                request_serializer=matchengine__pb2.BalanceUpdateRequest.SerializeToString,
                response_deserializer=matchengine__pb2.BalanceUpdateResponse.FromString,
                )
        self.AssetList = channel.unary_unary(
                '/matchengine.Matchengine/AssetList',
                request_serializer=matchengine__pb2.AssetListRequest.SerializeToString,
                response_deserializer=matchengine__pb2.AssetListResponse.FromString,
                )
        self.OrderPut = channel.unary_unary(
                '/matchengine.Matchengine/OrderPut',
                request_serializer=matchengine__pb2.OrderPutRequest.SerializeToString,
                response_deserializer=matchengine__pb2.OrderInfo.FromString,
                )
        self.BatchOrderPut = channel.unary_unary(
                '/matchengine.Matchengine/BatchOrderPut',
                request_serializer=matchengine__pb2.BatchOrderPutRequest.SerializeToString,
                response_deserializer=matchengine__pb2.BatchOrderPutResponse.FromString,
                )
        self.OrderQuery = channel.unary_unary(
                '/matchengine.Matchengine/OrderQuery',
                request_serializer=matchengine__pb2.OrderQueryRequest.SerializeToString,
                response_deserializer=matchengine__pb2.OrderQueryResponse.FromString,
                )
        self.OrderCancel = channel.unary_unary(
                '/matchengine.Matchengine/OrderCancel',
                request_serializer=matchengine__pb2.OrderCancelRequest.SerializeToString,
                response_deserializer=matchengine__pb2.OrderInfo.FromString,
                )
        self.OrderCancelAll = channel.unary_unary(
                '/matchengine.Matchengine/OrderCancelAll',
                request_serializer=matchengine__pb2.OrderCancelAllRequest.SerializeToString,
                response_deserializer=matchengine__pb2.OrderCancelAllResponse.FromString,
                )
        self.OrderBookDepth = channel.unary_unary(
                '/matchengine.Matchengine/OrderBookDepth',
                request_serializer=matchengine__pb2.OrderBookDepthRequest.SerializeToString,
                response_deserializer=matchengine__pb2.OrderBookDepthResponse.FromString,
                )
        self.OrderDetail = channel.unary_unary(
                '/matchengine.Matchengine/OrderDetail',
                request_serializer=matchengine__pb2.OrderDetailRequest.SerializeToString,
                response_deserializer=matchengine__pb2.OrderInfo.FromString,
                )
        self.MarketList = channel.unary_unary(
                '/matchengine.Matchengine/MarketList',
                request_serializer=matchengine__pb2.MarketListRequest.SerializeToString,
                response_deserializer=matchengine__pb2.MarketListResponse.FromString,
                )
        self.ReloadMarkets = channel.unary_unary(
                '/matchengine.Matchengine/ReloadMarkets',
                request_serializer=matchengine__pb2.ReloadMarketsRequest.SerializeToString,
                response_deserializer=matchengine__pb2.SimpleSuccessResponse.FromString,
                )
        self.MarketSummary = channel.unary_unary(
                '/matchengine.Matchengine/MarketSummary',
                request_serializer=matchengine__pb2.MarketSummaryRequest.SerializeToString,
                response_deserializer=matchengine__pb2.MarketSummaryResponse.FromString,
                )
        self.Transfer = channel.unary_unary(
                '/matchengine.Matchengine/Transfer',
                request_serializer=matchengine__pb2.TransferRequest.SerializeToString,
                response_deserializer=matchengine__pb2.TransferResponse.FromString,
                )
        self.DebugDump = channel.unary_unary(
                '/matchengine.Matchengine/DebugDump',
                request_serializer=matchengine__pb2.DebugDumpRequest.SerializeToString,
                response_deserializer=matchengine__pb2.DebugDumpResponse.FromString,
                )
        self.DebugReset = channel.unary_unary(
                '/matchengine.Matchengine/DebugReset',
                request_serializer=matchengine__pb2.DebugResetRequest.SerializeToString,
                response_deserializer=matchengine__pb2.DebugResetResponse.FromString,
                )
        self.DebugReload = channel.unary_unary(
                '/matchengine.Matchengine/DebugReload',
                request_serializer=matchengine__pb2.DebugReloadRequest.SerializeToString,
                response_deserializer=matchengine__pb2.DebugReloadResponse.FromString,
                )


class MatchengineServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RegisterUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BalanceQuery(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BalanceUpdate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AssetList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OrderPut(self, request, context):
        """rpc AssetSummary(AssetSummaryRequest) returns (AssetSummaryResponse) {}
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BatchOrderPut(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OrderQuery(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OrderCancel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OrderCancelAll(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OrderBookDepth(self, request, context):
        """rpc OrderBook(OrderBookRequest) returns (OrderBookResponse) {}
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OrderDetail(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MarketList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReloadMarkets(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MarketSummary(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Transfer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DebugDump(self, request, context):
        """Used only in development
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DebugReset(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DebugReload(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MatchengineServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterUser': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterUser,
                    request_deserializer=matchengine__pb2.UserInfo.FromString,
                    response_serializer=matchengine__pb2.UserInfo.SerializeToString,
            ),
            'BalanceQuery': grpc.unary_unary_rpc_method_handler(
                    servicer.BalanceQuery,
                    request_deserializer=matchengine__pb2.BalanceQueryRequest.FromString,
                    response_serializer=matchengine__pb2.BalanceQueryResponse.SerializeToString,
            ),
            'BalanceUpdate': grpc.unary_unary_rpc_method_handler(
                    servicer.BalanceUpdate,
                    request_deserializer=matchengine__pb2.BalanceUpdateRequest.FromString,
                    response_serializer=matchengine__pb2.BalanceUpdateResponse.SerializeToString,
            ),
            'AssetList': grpc.unary_unary_rpc_method_handler(
                    servicer.AssetList,
                    request_deserializer=matchengine__pb2.AssetListRequest.FromString,
                    response_serializer=matchengine__pb2.AssetListResponse.SerializeToString,
            ),
            'OrderPut': grpc.unary_unary_rpc_method_handler(
                    servicer.OrderPut,
                    request_deserializer=matchengine__pb2.OrderPutRequest.FromString,
                    response_serializer=matchengine__pb2.OrderInfo.SerializeToString,
            ),
            'BatchOrderPut': grpc.unary_unary_rpc_method_handler(
                    servicer.BatchOrderPut,
                    request_deserializer=matchengine__pb2.BatchOrderPutRequest.FromString,
                    response_serializer=matchengine__pb2.BatchOrderPutResponse.SerializeToString,
            ),
            'OrderQuery': grpc.unary_unary_rpc_method_handler(
                    servicer.OrderQuery,
                    request_deserializer=matchengine__pb2.OrderQueryRequest.FromString,
                    response_serializer=matchengine__pb2.OrderQueryResponse.SerializeToString,
            ),
            'OrderCancel': grpc.unary_unary_rpc_method_handler(
                    servicer.OrderCancel,
                    request_deserializer=matchengine__pb2.OrderCancelRequest.FromString,
                    response_serializer=matchengine__pb2.OrderInfo.SerializeToString,
            ),
            'OrderCancelAll': grpc.unary_unary_rpc_method_handler(
                    servicer.OrderCancelAll,
                    request_deserializer=matchengine__pb2.OrderCancelAllRequest.FromString,
                    response_serializer=matchengine__pb2.OrderCancelAllResponse.SerializeToString,
            ),
            'OrderBookDepth': grpc.unary_unary_rpc_method_handler(
                    servicer.OrderBookDepth,
                    request_deserializer=matchengine__pb2.OrderBookDepthRequest.FromString,
                    response_serializer=matchengine__pb2.OrderBookDepthResponse.SerializeToString,
            ),
            'OrderDetail': grpc.unary_unary_rpc_method_handler(
                    servicer.OrderDetail,
                    request_deserializer=matchengine__pb2.OrderDetailRequest.FromString,
                    response_serializer=matchengine__pb2.OrderInfo.SerializeToString,
            ),
            'MarketList': grpc.unary_unary_rpc_method_handler(
                    servicer.MarketList,
                    request_deserializer=matchengine__pb2.MarketListRequest.FromString,
                    response_serializer=matchengine__pb2.MarketListResponse.SerializeToString,
            ),
            'ReloadMarkets': grpc.unary_unary_rpc_method_handler(
                    servicer.ReloadMarkets,
                    request_deserializer=matchengine__pb2.ReloadMarketsRequest.FromString,
                    response_serializer=matchengine__pb2.SimpleSuccessResponse.SerializeToString,
            ),
            'MarketSummary': grpc.unary_unary_rpc_method_handler(
                    servicer.MarketSummary,
                    request_deserializer=matchengine__pb2.MarketSummaryRequest.FromString,
                    response_serializer=matchengine__pb2.MarketSummaryResponse.SerializeToString,
            ),
            'Transfer': grpc.unary_unary_rpc_method_handler(
                    servicer.Transfer,
                    request_deserializer=matchengine__pb2.TransferRequest.FromString,
                    response_serializer=matchengine__pb2.TransferResponse.SerializeToString,
            ),
            'DebugDump': grpc.unary_unary_rpc_method_handler(
                    servicer.DebugDump,
                    request_deserializer=matchengine__pb2.DebugDumpRequest.FromString,
                    response_serializer=matchengine__pb2.DebugDumpResponse.SerializeToString,
            ),
            'DebugReset': grpc.unary_unary_rpc_method_handler(
                    servicer.DebugReset,
                    request_deserializer=matchengine__pb2.DebugResetRequest.FromString,
                    response_serializer=matchengine__pb2.DebugResetResponse.SerializeToString,
            ),
            'DebugReload': grpc.unary_unary_rpc_method_handler(
                    servicer.DebugReload,
                    request_deserializer=matchengine__pb2.DebugReloadRequest.FromString,
                    response_serializer=matchengine__pb2.DebugReloadResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'matchengine.Matchengine', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Matchengine(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RegisterUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/matchengine.Matchengine/RegisterUser',
            matchengine__pb2.UserInfo.SerializeToString,
            matchengine__pb2.UserInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BalanceQuery(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/matchengine.Matchengine/BalanceQuery',
            matchengine__pb2.BalanceQueryRequest.SerializeToString,
            matchengine__pb2.BalanceQueryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BalanceUpdate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/matchengine.Matchengine/BalanceUpdate',
            matchengine__pb2.BalanceUpdateRequest.SerializeToString,
            matchengine__pb2.BalanceUpdateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AssetList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/matchengine.Matchengine/AssetList',
            matchengine__pb2.AssetListRequest.SerializeToString,
            matchengine__pb2.AssetListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OrderPut(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/matchengine.Matchengine/OrderPut',
            matchengine__pb2.OrderPutRequest.SerializeToString,
            matchengine__pb2.OrderInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BatchOrderPut(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/matchengine.Matchengine/BatchOrderPut',
            matchengine__pb2.BatchOrderPutRequest.SerializeToString,
            matchengine__pb2.BatchOrderPutResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OrderQuery(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/matchengine.Matchengine/OrderQuery',
            matchengine__pb2.OrderQueryRequest.SerializeToString,
            matchengine__pb2.OrderQueryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OrderCancel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/matchengine.Matchengine/OrderCancel',
            matchengine__pb2.OrderCancelRequest.SerializeToString,
            matchengine__pb2.OrderInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OrderCancelAll(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/matchengine.Matchengine/OrderCancelAll',
            matchengine__pb2.OrderCancelAllRequest.SerializeToString,
            matchengine__pb2.OrderCancelAllResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OrderBookDepth(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/matchengine.Matchengine/OrderBookDepth',
            matchengine__pb2.OrderBookDepthRequest.SerializeToString,
            matchengine__pb2.OrderBookDepthResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OrderDetail(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/matchengine.Matchengine/OrderDetail',
            matchengine__pb2.OrderDetailRequest.SerializeToString,
            matchengine__pb2.OrderInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MarketList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/matchengine.Matchengine/MarketList',
            matchengine__pb2.MarketListRequest.SerializeToString,
            matchengine__pb2.MarketListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReloadMarkets(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/matchengine.Matchengine/ReloadMarkets',
            matchengine__pb2.ReloadMarketsRequest.SerializeToString,
            matchengine__pb2.SimpleSuccessResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MarketSummary(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/matchengine.Matchengine/MarketSummary',
            matchengine__pb2.MarketSummaryRequest.SerializeToString,
            matchengine__pb2.MarketSummaryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Transfer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/matchengine.Matchengine/Transfer',
            matchengine__pb2.TransferRequest.SerializeToString,
            matchengine__pb2.TransferResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DebugDump(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/matchengine.Matchengine/DebugDump',
            matchengine__pb2.DebugDumpRequest.SerializeToString,
            matchengine__pb2.DebugDumpResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DebugReset(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/matchengine.Matchengine/DebugReset',
            matchengine__pb2.DebugResetRequest.SerializeToString,
            matchengine__pb2.DebugResetResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DebugReload(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/matchengine.Matchengine/DebugReload',
            matchengine__pb2.DebugReloadRequest.SerializeToString,
            matchengine__pb2.DebugReloadResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
